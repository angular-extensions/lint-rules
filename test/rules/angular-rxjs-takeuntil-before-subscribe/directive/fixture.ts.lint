import { combineLatest, of, Subject } from "rxjs";
import { switchMap, takeUntil, shareReplay, tap } from "rxjs/operators";

const a = of("a");
const b = of("b");
const c = of("c");
const d = of("d");

const e = a.pipe(switchMap(_ => b)).subscribe();

const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

const g = a.pipe(takeUntil(d), s => switchMap(_ => b)).subscribe();

class MyClass {
    someMethod() {
        const e = a.pipe(switchMap(_ => b)).subscribe();

        const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

        const g = a.pipe(takeUntil(d), s => switchMap(_ => b)).subscribe();
    }
}

@Directive({
  selector: '[app-my]'
})
class MyDirective {
      ~~~~~~~~~~~                               [angular-rxjs-takeuntil-before-subscribe-subscribe-ondestroy]

    private destroy$: Subject<void> = new Subject<void>();

    k$ = a.pipe(shareReplay(1));
                ~~~~~~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-operator-sharereplay]

    someMethod() {
        const d = a.subscribe();
                    ~~~~~~~~~                               [angular-rxjs-takeuntil-before-subscribe-subscribe]

        const e = a.pipe(switchMap(_ => b)).subscribe();
                                            ~~~~~~~~~                               [angular-rxjs-takeuntil-before-subscribe-subscribe]

        const f = a.pipe(switchMap(_ => b), takeUntil(this.destroy$)).subscribe();

        const g = a.pipe(takeUntil(this.destroy$), switchMap(_ => b)).subscribe();
                                                                      ~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-subscribe]

        const h = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();
                                                      ~            [angular-rxjs-takeuntil-before-subscribe-subscribe-subject-name]

        const k1 = a.pipe(takeUntil(this.destroy$), shareReplay(1)).subscribe();
                                                                    ~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-subscribe]

        const k = a.pipe(shareReplay(1), takeUntil(this.destroy$)).subscribe();
                         ~~~~~~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-operator-sharereplay]

        const m = a.pipe(tap(), shareReplay(1), takeUntil(this.destroy$)).subscribe();
                                ~~~~~~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-operator-sharereplay]

        const n = a.pipe(takeUntil(d), shareReplay(1), takeUntil(this.destroy$)).subscribe();
                                   ~            [angular-rxjs-takeuntil-before-subscribe-subscribe-subject-name]

    }
}

@Directive({
  selector: '[app-my]'
})
class MyDirective implements OnDestroy {
    someMethod() {
        const f = a.pipe(switchMap(_ => b), takeUntil(this._destroy$)).subscribe();
    }

    ngOnDestroy() {
    ~~~~~~~~~~~            [angular-rxjs-takeuntil-before-subscribe-subscribe-next-missing]
      // this._destroy$.next() is missing
      this.destroy$.next();
      this.destroy$.complete();
    }
}


@Directive({
  selector: '[app-my]'
})
class MyDirective implements SomeInterface, OnDestroy {
    private destroy$: Subject<void> = new Subject<void>();

    k$ = a.pipe(takeUntil(this.destroy$), shareReplay(1));

    someMethod() {
        const e = a.pipe(switchMap(_ => b), takeUntil(this.destroy$)).subscribe();

        const k = a.pipe(takeUntil(this.destroy$), shareReplay(1), takeUntil(this.destroy$)).subscribe();
    }

    ngOnDestroy() {
      this.destroy$.next();
      this.destroy$.complete();
    }
}


[angular-rxjs-takeuntil-before-subscribe-subscribe]: subscribe within a component must be preceded by takeUntil
[angular-rxjs-takeuntil-before-subscribe-subscribe-subject-name]: takeUntil argument must be a property of the class, e.g. takeUntil(this.destroy$)
[angular-rxjs-takeuntil-before-subscribe-subscribe-ondestroy]: component containing subscribe must implement the ngOnDestroy() method
[angular-rxjs-takeuntil-before-subscribe-subscribe-next-missing]: there must be an invocation of this._destroy$.next() in ngOnDestroy()
[angular-rxjs-takeuntil-before-subscribe-subscribe-complete-missing]: there must be an invocation of this._destroy$.complete() in ngOnDestroy()
[angular-rxjs-takeuntil-before-subscribe-operator-sharereplay]: the shareReplay operator used within a component must be preceded by takeUntil
